include llvm "../../runtime/runtime.ll";

import "print.uv";

external assume {
	// struct tm {
	// 	tm_sec: int;   // seconds after the minute - [0, 60] including leap second
	// 	tm_min: int;   // minutes after the hour - [0, 59]
	// 	tm_hour: int;  // hours since midnight - [0, 23]
	// 	tm_mday: int;  // day of the month - [1, 31]
	// 	tm_mon: int;   // months since January - [0, 11]
	// 	tm_year: int;  // years since 1900
	// 	tm_wday: int;  // days since Sunday - [0, 6]
	// 	tm_yday: int;  // days since January 1 - [0, 365]
	// 	tm_isdst: int; // daylight savings time flag
	// }

	fn NowUTC (): i64;
	// fn Now (): i64;
}

struct Date {
	day: int;
	month: int;
	year: int;
}

struct Time {
	hours: int;
	minutes: int;
	seconds: int;
}


fn GetDate(unixTime: i64): Date {
	// Needs higherlevel type casting to implement correctly
	// int s = 1313905026;
	// int z = s / 86400 + 719468;
	// int era = (z >= 0 ? z : z - 146096) / 146097;
	// unsigned doe = static_cast<unsigned>(z - era * 146097);
	// unsigned yoe = (doe - doe/1460 + doe/36524 - doe/146096) / 365;
	// int y = static_cast<int>(yoe) + era * 400;
	// unsigned doy = doe - (365*yoe + yoe/4 - yoe/100);
	// unsigned mp = (5*doy + 2)/153;
	// unsigned d = doy - (153*mp+2)/5 + 1;
	// unsigned m = mp + (mp < 10 ? 3 : -9);
	// y += (m <= 2);
	// std::cout << m << '/' << d << '/' << y << '\n'; // 8/21/2011

	let date = Blank#[Date]();

	let s = unixTime;
	let z = s/86400 + 719468;

	let t1: int;
	if (z >= 0) {
		t1 = z;
	} else {
		t1 = z - 146096;
	}
	let era: int = t1/146097;


	let doe = z - era*146097;
	let yoe = (doe - doe/1460 + doe/36524 - doe/146096) / 365;
	let y = yoe + era*400;
	let doy = doe - (365*yoe + yoe/4 - yoe/100);
	let mp = (5*doy + 2)/153;
	let d = doy - (153*mp + 2)/5 + 1;

	let t2: int;
	if (mp < 10) {
		t2 = 3;
	} else {
		t2 = -9;
	}
	let m = mp + t2;
	// y = y + cast#[int](m <= 2);

	date.day = d;
	date.month = m;
	date.year = y;
	compose date;

	return date;
}

fn GetTime(unixTime: i64): Time {
	let unix = cast#[int] (unixTime);

	let t = Blank#[Time]();
	t.seconds = unix % 60;
	t.minutes = unix / 60 % 60;
	t.hours   = unix / 3600 % 24;

	return t;
}